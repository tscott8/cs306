#+TITLE:  3rd Exploration
#+AUTHOR: Rick Neff
#+EMAIL:  rick.neff@gmail.com
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+STARTUP:   showeverythingNOT
#+COLLABORATORS: Tyler Scott, Marc Hartley

* To Boldly Go ...

  You are invited to apply what you've learned this semester to synthesize and
  analyze algorithms for solving Problem 3 of your 1st Exploration by shrewdly
  searching through a sentential solution space, combinatorially explosive, vast
  in its extent. This invitation to exploration is codenamed [[file:vastness.org][vastness]].

* Report

** Introduction
The goal of this exploration was to use the knowledge we have gained over the semester
to solve Problem 3 in our first Exploration. This problme was broken into two parts:
[1] identifying the words that make up the question, and [2] figuring out the correct
configuration of these words.

** Part 1


* Code

#+BEGIN_SRC elisp
; Start with a string of zeros 26 long (i.e. 0000000000000000000000000)
; for i in lenght of string
;    set currentBest (lcd-query string)
;    set attempt 0
;    while (attempt < currentBest)
;       set temp (increment ith element in string)
;       set attempt (lcd-query string)
;       if (attempt < currentBest)
;           set string temp
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle vastness-part-1-setup.el
  (require 'cl)

  (defun keep-only-up-to-seven-letter-words (words-filename)
    "Given a words-filename, extract and return as a list only
     those words with seven letters or fewer."
    (let ((good-list nil) begin word)
      (with-temp-buffer
        (insert-file-contents words-filename)
        (while (not (looking-at "^$"))
          (setq begin (point))
          (end-of-line)
          (setq word (buffer-substring-no-properties begin (point)))
          (if (<= (length word) 7)
              (setq good-list (cons word good-list)))
          (forward-char 1)
          ))
      good-list))

  (defun word-size-frequencies-match (subset-of-words)
    (let* ((letter-counts (make-vector 20 0))
           (frequencies (make-vector 8 0))
           (target [0 1 5 4 3 2 3 2]))
      (loop for word in subset-of-words
            for i from 0
            do (aset letter-counts i (length word)))
      (loop for i from 1 to 7
            do (aset frequencies i (loop for n across letter-counts count (= i n))))
      (equal frequencies target)))

  (defun has-exactly-77-letters (subset-of-words)
    (= 77 (apply #'+ (mapcar #'length subset-of-words))))

  (defun is-good-candidate-subset (subset-of-words)
    (and (and (word-size-frequencies-match subset-of-words)
              (has-exactly-77-letters subset-of-words))
              (string= (generate-count-as-string subset-of-words) 
                        "8202721241112883084A200010")))

  (defun word-list ()
    "Thirty-one words, some twenty-word subset of which is the right one."
    (quote ("digit"
            "be"
            "to"
            "just"
            "a"
            "any"
            "numbers"
            "or"
            "pattern"
            "first"
            "reason"
            "appear"
            "on"
            "look"
            "ten"
            "that"
            "for"
            "in"
            "random"
            "the")))

  (defun choose-random-twenty-from-word-list ()
    (let ((twenty-list nil)
          (random-word nil)
          (the-list (word-list)))
      (loop while (not (= 20 (length twenty-list)))
            do (setq random-word (nth (random 35) the-list))
            (unless (member random-word twenty-list)
              (setq twenty-list (cons random-word twenty-list))))
      twenty-list))

  (defun find-a-few-good-candidates (&optional n)
    (if (null n) (setq n 20000000))
    (let ((filename "good-candidates.txt"))
      (with-temp-buffer
        (and (file-readable-p filename) (insert-file-contents filename))
        (loop repeat n
              do (let ((random-twenty (choose-random-twenty-from-word-list)))
                   (when (is-good-candidate-subset random-twenty)
                     (insert (mapconcat #'identity random-twenty " "))
                     (insert "\n"))))
        (write-file filename))))

  (defvar shell-command-format-string "curl -s https://firstthreeodds.org/run/app?lcdq+%s")

  (defun lcd-query (counts-as-string)
    (let* ((response (shell-command-to-string (format shell-command-format-string counts-as-string)))
           (response (replace-regexp-in-string "\n" "" response))
           (distance (if (string= response "bad query") most-positive-fixnum
                       (string-to-number response))))
      distance))


#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle part-1.el
(defun generate-count-as-string (candidate)
   (interactive "r")
   (let ((response)
         (cmdStr (format "python3 test.py %s" candidate)))
      (setq response (replace-regexp-in-string "\n" "" (shell-command-to-string cmdStr)))
   response))

(find-a-few-good-candidates 1000)

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle vastness-part-2-setup.el
  (require 'cl)

  ;;
  ;; A "state" is a permutation of the 20 words, each word encoded as one of
  ;; the first twenty letters (a-t).
  ;;
  ;; Sort the 20 words in lexicographic order and then assign each a letter,
  ;; in order from a-t.
  ;;
  ;; So, a state is a permutation of the string "abcdefghijklmnopqrst".
  ;;
  ;; Its energy is how "far" it is from the correct permutation.
  ;;
  ;; Lowering its energy means getting closer to the correct permutation.
  ;;
  ;; Use creative strategies to move-from a current state to a new state:
  ;;
  ;; 1) by swapping the letters at two randomly chosen positions, or
  ;; 2) by doing the "Knuth shuffle", or
  ;; 3) you decide.

  (defun char-word-alist ()
    (quote ((?a . "a")
            (?b . "any")
            (?c . "appear")
            (?d . "be")
            (?e . "digit")
            (?f . "first")
            (?g . "for")
            (?h . "in")
            (?i . "just")
            (?j . "look")
            (?k . "numbers")
            (?l . "on")
            (?m . "or")
            (?n . "pattern")
            (?o . "random")
            (?p . "reason")
            (?q . "ten")
            (?r . "that")
            (?s . "the")
            (?t . "to")
            )))

  (defun word-string-to-perm (word-string)
    (let ((words-as-list (split-string word-string " ")))
      (mapconcat (lambda (x) (string (car (rassoc x (char-word-alist)))))
                 words-as-list "")))

  (defvar correct-perm "bnhmpgsqekrlafjictdo")

  (defun perm-to-word-string (perm)
    (mapconcat (lambda (x) (cdr (assoc x (char-word-alist)))) perm " "))

  (defun string-to-list (str)
    (map 'list (lambda (x) (- x ?a)) str))

  (defvar correct-perm-as-list (string-to-list correct-perm))

  (defun factorial (n)
    "Calculates n!"
    (if (< n 2) 1 (* n (factorial (1- n)))))

  (defun rank (y)
    "Calculates the lexicographical rank of a given list of n
       numbers (a permutation)."
    (if (zerop (length y)) 0
      (let* ((x0 (car y))
             (xs (cdr y)))
        (+ (rank xs)
           (* (loop for x in xs when (< x x0) sum 1)
              (factorial (length xs)))))))

  (defvar rank-of-correct-perm-as-list (rank correct-perm-as-list))

  (defun distance (perm)
    "Calculates the difference between the given permutation's rank
       and the rank of the correct permutation."
    (abs (- (rank (string-to-list perm)) rank-of-correct-perm-as-list)))

  (defun energy (state)
    "Defines a permutation's energy as its distance."
    (distance state))

  (defun random-01 ()
    "Returns a random float between 0 and 1."
    (/ (random most-positive-fixnum) (float most-positive-fixnum)))

  (defun probability (energy new-energy temperature)
    "Computes the probability of preferring new-energy to energy."
    (if (< new-energy energy) ; better
        1.0
      (exp (- (/ (- new-energy energy) temperature))))) ; why is temperature used here?

  (defun knuth-shuffle (x)
    (if (listp x)
        (map 'list #'identity (knuth-shuffle (apply #'vector x)))
      (loop for i from (1- (length x)) downto 1
            do (rotatef (aref x i) (aref x (random i))))
      x))

  (defun swap-random (perm)
    "Swaps a random character in perm with the next one adjacent to it, wrapping from end to beginning."
    (let* ((len (length perm))
           (i1 (random len))
           (i2 (% (1+ i1) len))
           (i1letter (aref perm i1))
           (i2letter (aref perm i2)))
      (aset perm i1 i2letter)
      (aset perm i2 i1letter)
      perm))

  (defun move-from (state energy)
    (swap-n-random (copy-sequence state) energy)) ; or swap-random, or ...

  (defun simulate-annealing (initial-state initial-temperature cooling-rate)
    "Performs simulated annealing based on the above functions and
     passed-in initial state, initial temperature and cooling rate parameters."
    (let* ((state (copy-sequence initial-state))
           (temperature initial-temperature)
           (energy (energy state)) ; initial energy
           (best-state state) ; initial best state
           (best-energy energy) ; initial best energy
           (iterations 0)
           new-state new-energy)
      ;; Loop until system has cooled
      (while (> temperature 1)
        (setq new-state (move-from state energy)
              new-energy (energy new-state))

        (when (> (probability energy new-energy temperature) (random-01))
          (setq state new-state
                energy new-energy))

        (when (< new-energy best-energy)
          (setq best-state new-state
                best-energy new-energy))

        ;; Count iterations
        (incf iterations)
        ;; Cool things down
        (setq temperature (if (zerop best-energy) 1 (* temperature cooling-rate))))

      ;; Report best state, its energy and the number of iterations of the while loop
      (list best-state best-energy iterations)))

  (defun try-it (&optional initial-state &optional initial-temperature &optional cooling-rate)
    "Executes the simulate-annealing function with (possibly) default values."
    (or initial-state (setq initial-state "abcdefghijklmnopqrst"))
    (or initial-temperature (setq initial-temperature 100000))
    (or cooling-rate (setq cooling-rate .999))
    (simulate-annealing initial-state initial-temperature cooling-rate))

  (defun run ()
    (message (format "%s" (try-it nil 1000000))))

(try-it nil 1000000000000 .9999)

#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle part-2.el

(defun riffle-shuffle (x)
   (let* ((response (shell-command-to-string (format "python3 riffle-shuffle.py %s" x)))
          (response (replace-regexp-in-string "\n" "" response)))
      response))

(defun pair-shuffle (x temp)
   (let* ((response (shell-command-to-string (format "python3 pair-shuffle.py %s %s" x temp)))
          (response (replace-regexp-in-string "\n" "" response)))
      response))

(defun fish-shuffle (x temp)
   (let* ((response (shell-command-to-string (format "python3 fish.py %s %s" x temp)))
          (response (replace-regexp-in-string "\n" "" response)))
      response))

(defun n-shuffle (x temp)
   (let* ((response (shell-command-to-string (format "python3 n-shuffle.py %s %s" x temp)))
          (response (replace-regexp-in-string "\n" "" response)))
      response))

(defun swap-n-random (perm temp)
   "Swaps a random character in perm with the next one adjacent to it, wrapping from end to beginning."
   (let ((len (length perm))
         (i1) (i2) (i1letter) (i2letter))
         (while (> temp 0)
            (progn
               (set 'i1 (random len))
               (set 'i2 (% (1+ i1) len))
               (set 'i1letter (aref perm i1))
               (set 'i2letter (aref perm i2))
               (aset perm i1 i2letter)
               (aset perm i2 i1letter)
               (setq temp (/ temp 10))))
      perm))
#+END_SRC


* Feedback
